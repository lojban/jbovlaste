<%args>
$actionPage => undef
$definition => undef
$check => undef
$final => undef
$glossmax => 3
$glossadd => undef
$placemax => 3
$placeadd => undef
$valsiword => undef
$type => undef
$valsiid => undef
$langid => undef
$definitiontxt => undef
$notes => undef
$valsitxt => undef
$langtag => undef
$selmaho => undef
$dollarsok => undef
$jargon => undef
$jargonadd => undef
$jargondrop => undef
</%args>

<%shared>
our $titlestr;
our $notready = 0;
</%shared>

<%method title>
Adding definition: <% $titlestr %>
</%method>

<%init>
our($dbh,%session);
use utils;
use Unicode::String;
use String::Approx 'amatch';
$r->content_type("text/html; charset=utf-8");
# Used to say we're not ready to submit yet
my $notyet;
</%init>

<%perl>
if( $definition && ! $valsiid )
{
    if( ! defined( $check ) )
    {
	$check = 1;
	$notyet = 1;
    }
    my @dbreturns = $dbh->selectrow_array("SELECT valsiid, langid,
	    definition, notes, selmaho, jargon FROM
	    definitions WHERE definitionid=?", undef, $definition);
    ( $valsiid, $langid, $definitiontxt, $notes, $selmaho, $jargon ) = @dbreturns;
}

if( defined( $jargondrop ) )
{
    undef $jargon;
    undef $jargonadd;
}

#print "<pre>".Dumper(\%ARGS)."</pre>";
#print "<pre>v: $valsiid, $valsiword, $definition, $langid, $type.\n</pre>";

#print "<pre>add: $glossadd, $glossmax, $placeadd, $placemax.\n</pre>";

if( ! defined( $type ) )
{
    $type = $dbh->selectrow_array("SELECT descriptor FROM valsitypes where typeid=
	(SELECT typeid FROM valsi WHERE valsiid=?)", undef, $valsiid);
}

# Adding a gloss word
if( defined( $glossadd ))
{
    $glossmax++;
}

# Adding a place word
if( defined( $placeadd ))
{
    $placemax++;
}
</%perl>

% unless(defined($session{'username'})) {
<font size="+3">Not logged in</font>
<hr />
You ought not have been able to view this page, as you aren't logged in!
%    $titlestr = "Not logged in";
%    return;
% }

% unless((defined($valsiid) || defined($valsiword)) && defined($langid)) {
<font size="+3">Must specify valsi and language</font>
<hr />
Not enough info to know what to do.
%   $titlestr = "Must specify valsi and language";
%   return;
% }

<%perl>
if( ! defined($definitiontxt) || defined($check) || 
    defined( $jargonadd ) || defined( $jargondrop ) || 
    defined( $glossadd ) || defined( $placeadd ) ) {
    # Either the user got here through addvalsi, in which case
    # valsiword will be set, or they got here through dict/dhandler,
    # and/or editdef.html, in which case valsiid will be set.

    my($langrealname,$langtag);

    if( defined( $valsiid ))
    {
	my @initialresult = $dbh->selectrow_array("SELECT (SELECT word FROM
	    valsi WHERE valsiid=?), realname, tag FROM languages WHERE langid=?",
		undef, $valsiid, $langid);
	($valsiword,$langrealname,$langtag) = @initialresult;
    } elsif( defined( $valsiword )) {
	my @initialresult = $dbh->selectrow_array("SELECT 
		realname, tag FROM languages WHERE langid=?",
		undef, $langid);

	($langrealname,$langtag) = @initialresult;
    } else {
	$m->out("Sorry, couldn't find either the valsi ID you requested, or something else went wrong.");
	return;
    }

    utf8::decode($definitiontxt);
    utf8::decode($jargon);
    utf8::decode($notes);

    $notes =~ s/\s*[\r\n]+\s*/ /g;
    $notes =~ s/^\s+//g;
    $notes =~ s/\s+$//g;

</%perl>

<form method="post" action="<% $actionPage %>">
 <table>
  <tr>
   <td>
% if( defined( $valsiid ) ) {
	<input type="hidden" name="valsiid" value="<% $valsiid %>">
% }
    <input type="hidden" name="definition" value="<% $definition | h %>">
    <input type="hidden" name="valsiword" value="<% $valsiword | h %>">
    <input type="hidden" name="langid" value="<% $langid %>">
    <input type="hidden" name="type" value="<% $type | h %>">
    <input type="hidden" name="valsitxt" value="<% $valsiword | h %>">
    <input type="hidden" name="langtag" value="<% $langtag | h %>">
    <input type="hidden" name="glossmax" value="<% $glossmax %>">
    <input type="hidden" name="placemax" value="<% $placemax %>">
   </td>
  </tr>
  <tr>
   <td>Definition</td>
   <td><input type="text" name="definitiontxt" value="<% $definitiontxt | h %>" size="80"></td>
   <td>
	For information on how to format the definition, see <a
	href="../help/definitions.html">the definition help file</a>.
   </td>
  </tr>
  <tr>
   <td colspan="3">
<%doc>
Here we check for the required amount of dollar signs, if any, and disallow if
necessary.
</%doc>
<%perl>
if( defined( $check ) && scalar( $definitiontxt =~ tr/$/$/ ) < 2 &&
    !( $type eq "cmavo" || $type eq "cmavo-compound" ||
	$type eq "experimental cmavo" || $type eq "cmevla" ||
	$type eq "obsolete cmevla" || $type eq "bu-letteral" || $type eq "phrase" ) ) {
    $notready = 1;
</%perl>

    <p><strong><font color="red">WARNING!</font></strong>
	I see that there are less than two dollar signs in your
	definition.  This implies that your word has no place
	structure. This is only okay for cmavo and cmevla. However, it
        appears that your word is of type: <strong><% $type %></strong>.
	Please <a
	href="../help/definitions.html">read the instructions</a>.
    </p>
% }
<%perl>
# Strip out all the simple $a_1=b_2$ pairs; complain if there's
# something left.
my $stripped=$definitiontxt;
$stripped =~ s{\$[a-z]+_?\d+(=[a-z]+_?\d+)*\$}{}g;

if( defined( $check ) && ( $stripped =~ /\$/ || $stripped =~ /_/ || $stripped =~ /=/ ) ) {
</%perl>
    <p><strong><font color="red">WARNING!</font></strong>
    IN THE DEFINITION FIELD: 
    I've stripped out everything that looks like place structure
    markup (i.e. $a1$ or $a_1=b_2$ or similar), but I still see
    dollar signs or underscores or equal signs.  Extraneous dollar
    signs or underscores, in particular, will break LaTeX, and hence
    the dictionary production.  If you're not absolutely sure you
    know how LaTeX markup works, please remove them.  Regardless,
    please check dictionary export when you're done.
	If you're confused, please <a
	href="../help/definitions.html">read the instructions</a>.
    </p>
    <p>Here's what I see after stripping:</p>
    <p><% $stripped %></p>
    </p>
% }
<%perl>
# Same thing, but with $notes.  Yay for code re-use.
#
# Strip out all the simple $a_1=b_2$ pairs; complain if there's
# something left.
$stripped=$notes;
$stripped =~ s{\$[a-z]+_?\d+(=[a-z]+_?\d+)?\$}{}g;

if( defined( $check ) && ( $stripped =~ /\$/ || $stripped =~ /_/ || $stripped =~ /=/ ) ) {
</%perl>
    <p><strong><font color="red">WARNING!</font></strong>
    IN THE NOTES FIELD: 
    I've stripped out everything that looks like place structure
    markup (i.e. $a1$ or $a_1=b_2$ or similar), but I still see
    dollar signs or underscores or equal signs.  Extraneous dollar
    signs or underscores, in particular, will break LaTeX, and hence
    the dictionary production.  If you're not absolutely sure you
    know how LaTeX markup works, please remove them.  Regardless,
    please check dictionary export when you're done.
	If you're confused, please <a
	href="../help/definitions.html">read the instructions</a>.
    </p>
    <p>Here's what I see after stripping:</p>
    <p><% $stripped %></p>
    </p>
% }
<%perl>
# Slightly different thing: {...} in notes.
#
# Strip out all the simple {...} pairs; complain if there's
# something left.
$stripped=$notes;
$stripped =~ s/{(\w|\'|:|\|)+}//g;

if( defined( $check ) && ( $stripped =~ /{/ || $stripped =~ /}/ || $stripped =~ /\$/ ) ) {
</%perl>
    <p><strong><font color="red">WARNING!</font></strong>
    IN THE NOTES FIELD: 
    I've stripped out everything that looks like cross references
    (i.e. {klama}), but I still see {, } or $.  This will break
    LaTeX.  Please fix it. Please check dictionary export when
    you're done. If you're confused, please <a
	href="../help/definitions.html">read the instructions</a>.
    </p>
    <p>Here's what I see after stripping:</p>
    <p><% $stripped %></p>
    </p>
% }
   </td>
  </tr>
% if( $type eq "cmavo" || $type eq "cmavo-compound" ||
% $type eq "experimental cmavo" || $type eq "bu-letteral")
% {
  <tr>
   <td>selma'o</td>
   <td><input type="text" name="selmaho" value="<% $selmaho | h %>" size="15"></td>
    <td>
	Don't enter a selma'o unless you're sure you understand the
	implications, please.  Ask people to comment on the word and
	suggest what might work.
    </td>
  </tr>
% }
% if( defined $jargon || defined $jargonadd ) {
  <tr>
   <td>Jargon</td>
   <td>
    <textarea rows="1" cols="60" name="jargon"><% $jargon | h %></textarea>
   </td>
   <td>Briefly describe the activity or group that uses this word,
       or: 
   <input name="jargondrop" value="This Is Not A Jargon Word" type="submit"></td>
  </tr>
% } else {
  <tr>
   <td><input name="jargonadd" value="This Is A Jargon Word" type="submit"></td>
   </td>
  </tr>
% }
  <tr>
   <td>Notes</td>
   <td>
    <textarea rows="4" cols="60" name="notes"><% $notes | h %></textarea>
   </td>
   <td>Line breaks will be converted to spaces. <strong>Please link to 
   other valsi you use! (wrap them in {...})</strong></td>
  </tr>
  <tr>
   <td colspan="2">
   <h3>Gloss Keywords</h3>
   <td><input name="glossadd" value="Add A Gloss Keyword" type="submit"></td>
   </td>
  </tr>
  <tr>
   <td colspan="2">
   <& keywordList, %ARGS, type => 'gloss', typeName => 'Gloss',
   max => $glossmax, langtag => $langtag, langid => $langid &>
   </td>
   <td>
    Please read <a href="../help/natlangwords.html">details on the
    second field</a>. You can look at a <a
    href="../natlang/listing.html" target="_blank">natlang listing in a
    new window</a> to see what words already exist.
   </td>
  </tr>
  <tr>
   <td colspan="2">
   <h3>Place Keywords</h3>
   <td><input name="placeadd" value="Add A Place Keyword" type="submit"></td>
   </td>
  </tr>
  <tr>
   <td colspan="2">
   <& keywordList, %ARGS, type => 'place', typeName => 'Place',
   max => $placemax, langtag => $langtag, langid => $langid &>
   </td>
   <td>
    Please read <a href="../help/natlangwords.html">details on the
    second field</a>. You can look at a <a
    href="../natlang/listing.html" target="_blank">natlang listing in a
    new window</a> to see what words already exist.  Yes, you can now
    skip places.  Try not to, though; if less important places are at
    the front of your valsi, it's probably badly ordered.
   </td>
  </tr>
  <tr>
   <td><input name="check" value="Check Definition" type="submit"></td>
<%perl>
#print "<pre>ready: $notready, $check\n</pre>";
if( ! $notyet && defined( $check ) && ( ! defined( $notready ) || ! $notready ) )
{
</%perl>
   <td><input name="final" value="Submit Definition" type="submit"></td>
<%perl>
}
</%perl>
  </tr>
 </table>
</form>

<!--
<p>Please note that when you submit this, the values will be checked
   for consistency just as much as possible. For instance, you cannot
   provide a keyword for place 3 unless the contents of the definition
   lead me to believe that your definition includes a third
   place. (I'll generally be looking for "x3" in that case.)</p>
-->
<%perl>
    return 0;
} elsif ( $final ) {
    return 1;
}
</%perl>

<%doc>
    This sub-component does two things:

    1.  It presents a list of input areas to fill in natlang words
    an their meanings for either glosses or place keywords.

    2.  It checks for similar but not identical words in the
    database, and displays them if they exist.
</%doc>
<%def keywordList>
    <%perl>
    for(my $i=1; $i<=$max; $i++) {
	my $word = $ARGS{$type.'w'.$i};
	my $sense = $ARGS{$type.'m'.$i};
	my $notes = $ARGS{$type.'n'.$i};

utf8::decode($word);
utf8::decode($sense);
utf8::decode($notes);

	my $checkedname = $type.'c'.$i;
	my $checked = $ARGS{$type.'c'.$i};
	# Test comment
	</%perl>
	<p>
	<% $typeName %> Word #<% $i %>: <input type="text" value="<% $word | h %>" name="<% $type %>w<% $i %>" size="20">
	In Sense: <input type="text" value="<% $sense | h %>" name="<% $type | h %>m<% $i %>" size="30">
	</p>
	<%perl>

	# Check to see if this word already exists; if not, do
	# various other kinds of testing/whining
	my $exactWord;

	if( $sense )
	{
	    $exactWord = $dbh->selectrow_array( "SELECT wordid FROM natlangwords
		WHERE wordid > 0 AND langid = $langid
		AND word = ? AND meaning = ?
		", undef, $word, $sense );
	} else {
	    # No sense/meaning given; search for blank ones.
	    $exactWord = $dbh->selectrow_array( "SELECT wordid FROM natlangwords
		WHERE wordid > 0 AND langid = $langid
		AND word = ? AND (meaning = '' OR meaning IS NULL)
		", undef, $word );
	}


	if( $word && ! $exactWord )
	{
	    </%perl>
	    <div class="form-notice">
	    Notes: <input type="text" value="<% $notes | h %>" name="<% $type | h %>n<% $i %>" size="30">
	    <p><strong>This word doesn't exist</strong>; if you're
	    sure you want to add it, please check this box: <input
	    type="checkbox" name="<% $checkedname | h %>"
	    <% $checked ? 'checked' : '' %>>
	    <%perl>

	    # Check for a default sense when it's not appropriate
	    my $query = $dbh->prepare("SELECT * FROM natlangwords WHERE word=? AND
		langid=$langid");

	    $query->execute($word);
	    $sense =~ s/^\s+//g;
	    $sense =~ s/\s+$//g;
	    my $bitched=0;
	    while( defined(my $row = $query->fetchrow_hashref) )
	    {
		if( length($sense) == 0 && ! $bitched )
		{
		    </%perl>
		    <h2>Please Read!</h2>

		    <p>This word is already defined, but you are trying to add a definition
		    with a default meaning (i.e. you put nothing in the "in the sense of"
			box).</p>

		    <p>The problem here is that the existence of a default meaning implies
		    that no differentiation from that meaning is reasonable.  Since another
		    definition exists, this is patently false. </p>

		    <p>Please go look at
		    <a href="<% $langtag %>/<% $word %>">other definitions for this word</a>,
			and see if any of them work for you.</p>

		    <p>If not, you're just going to have to go back and narrow the sense of
		    the word.</p>
		    <%perl>
		    $notready = 1;
		    $bitched = 1;
		}
	    }

	    # Suggest similar words
	    my $words = $dbh->selectall_arrayref( "SELECT word, wordid FROM natlangwords
		WHERE wordid > 0 AND langid = $langid
		AND length(?)-2<=length(word) AND length(?)+2>=length(word)
		", undef, $word, $word );

	    if( $words && ! $checked )
	    {
		# Not ready to submit
		$notready = 1;

		my @mywords = map { $_->[0].":".$_->[1] } @{ $words };

		my @matches;

		# If lang has any words at all...
		if( $#mywords > 0 )
		{
		    @matches = amatch( $word, [ "20%" ], @mywords );
		}

		#print "<pre>".Dumper(\$words)."</pre>";
		#print "<pre>".Dumper(\@matches)."</pre>";

		if( scalar( @matches ) )
		{
		    </%perl>
		    <h3><font color="red">Check These Words!</font></h3>

		    <p>
		    <strong>The following words seem similar to the one you
		    entered.</strong>
		    Please check that none of them will work for you:
		    </p>
		    <ul>
		    <%perl>

		    foreach my $match ( @matches )
		    {
			# The valsi is pretty much guaranteed not to have : in it.
			my $matchWord = $match;
			$matchWord =~ s/:.*//;

			my $matchWordId = $match;
			$matchWordId =~ s/[^:]*://;

			my $meaning = $dbh->selectrow_array( "SELECT meaning FROM
			    natlangwords WHERE wordid = ?", undef, $matchWordId);

			</%perl>
			<li><a href="../natlang/<% $langtag %>/<% $matchWord %>"><% $matchWord %><% $meaning ? ", in the sense of $meaning " : "" %></a></li>
			<%perl>
		    }
		    </%perl>
		    </ul>
		    <%perl>
		}
	    }
	    </%perl>
	    </div>
	    <%perl>
	}
    }
    </%perl>

    <%args>
    $type
    $typeName
    $max
    $langid
    $langtag
    </%args>

    <%init>
    our($dbh,%session);
    use utils;
    use Unicode::String;
    use String::Approx 'amatch';
    $r->content_type("text/html; charset=utf-8");
    </%init>

</%def>
