<%args>
%oldcontent => undef
%newcontent => undef
$type => undef
$typeUpper => undef
$valsiid => undef
$langid => undef
$valsiword => undef
</%args>

<%init>
our($dbh,%session);
use utils;
</%init>

<%perl>

my $errstr;

sub defdump
{
    my $contentref = shift;
    my %content = %{ $contentref };

    my $rettext;
    $rettext .= "\tDefinition:\n\t\t".$content{'definition'}."\n\n";
    $rettext .= "\tNotes:\n\t\t".$content{'notes'}."\n\n";
    $rettext .= "\tJargon:\n\t\t".$content{'jargon'}."\n\n";

    # Gloss words
    if( scalar $content{'glosses'} )
    {
	$rettext .= "\tGloss Keywords:\n";

	foreach my $glossref (@{ $content{'glosses'} })
	{
	    my @gloss = @{ $glossref };
	    $rettext .= "\t\tWord: ".$gloss[0].
	    ", In Sense: ".$gloss[1].
	    "\n";
	}
	$rettext .= "\n";
    }

    # Place words
    if( scalar $content{'places'} )
    {
	$rettext .= "\tPlace Keywords:\n";

	foreach my $placeref (@{ $content{'places'} })
	{
	    my @place = @{ $placeref };
	    $rettext .= "\t\tWord: ".$place[0].
	    ", In Sense: ".$place[1].
	    ", For Place: ".$place[2].
	    "\n";
	}
	$rettext .= "\n";
    }
}

my @emailbits;
push @emailbits, [$dbh->selectrow_array("SELECT u.email, u.username FROM
    valsi v, users u WHERE v.userid = u.userid AND
    v.valsiid=$valsiid")];

my $emailquery = $dbh->prepare( "SELECT u.email, u.username FROM definitions d, users u
    WHERE d.userid = u.userid AND d.valsiid=? AND d.langid=?" );

my $lang = $dbh->selectrow_array("SELECT realname FROM languages
    WHERE langid = ?", undef, $langid);

$emailquery->execute($valsiid, $langid);
while( defined(my $emailrow=$emailquery->fetchrow_arrayref) )
{
    push @emailbits, $emailrow;
}

# @emailbits currently looks like an array of:
#
# [
#   [
#     'foo@bar.com',
#     'username'
#   ],
#   [
#     'baz@qux.com',
#     'wibble'
#   ]
# ];

my @email;
use Email::Valid;
foreach my $epair (@emailbits) {
    if( Email::Valid->address(@{$epair}[0]) ) {
        push @email, @{$epair}[1];
    } else {
        $errstr .= "Address \"" . @{$epair}[0] . "\" for user \"" . @{$epair}[1] . "\" is not valid.\n"
    }
}

if( $#email < 1 ) {
    $errstr .= "No email addresses found!\n";
    return $errstr;
}

# uniqify the addresses
@email = keys %{{ map { $_ => 1 } @email }};

my $emailtext = "

In jbovlaste, the user $session{'username'} has $type a
definition of \"$valsiword\" in the language \"$lang\".

";

if( scalar( keys %oldcontent) > 1 )
{
    my @seq1 = split( /\n/, defdump(\%oldcontent) );
    my @seq2 = split( /\n/, defdump(\%newcontent) );

    #print "<pre>";
    #print Dumper(\@seq1);
    #print Dumper(\@seq2);
    #print Dumper(utils::mydiff(\@seq1, \@seq2));
    #print "</pre>";

    $emailtext .= "Differences:\n\n".utils::mydiff( \@seq1, \@seq2 )."\n\n";


    $emailtext .= "Old Data:\n\n".defdump(\%oldcontent)."\n\n";
}

$emailtext .= "New Data:\n\n".defdump(\%newcontent)."


You can go to <http://jbovlaste.lojban.org/dict/$valsiword> to see it.
";

utils::sendemail( ['rlpowell@digitalkingdom.org'],
    "Definition $typeUpper At Word $valsiword",
    $emailtext, $session{'username'} );

return $errstr;

</%perl>
