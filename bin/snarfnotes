#!/usr/bin/perl

use DBI;

use FindBin;
use lib "$FindBin::Bin/../lib";
use db;

my $time = time();

my $lang = 2;

my $userid = 1;  # officialdata

my $typeid = 1;  # gismu

if( ! $ARGV[0] || ! $ARGV[1] )
{
    print "Requires gismu.txt and cmavo.txt as args, in that order.\n";
}

open(GISMU,$ARGV[0]);
while(<GISMU>)
{
    if(/^([^\d]{5}) (.{12}) (.{21}).{21}(.{96}).{11}(.+)$/)
    {
        my($gismu,$rafsi,$glossword,$definition,$notes) = ($1,$2,$3,$4,$5);
        # Clean out traling spaces.
        $gismu =~ s/\s+$//;
        $selmaho =~ s/\s+$//;
        $glossword =~ s/\s+$//;
        $definition =~ s/\s+$//;
        $notes =~ s/\s+$//;

        $notes = undef unless length($notes);

        ####
        # Now we try to turn the notes into something that approximates
        # valid Wiki text.
        ####
        # ka[ ... ],
        $notes =~ s/([a-z'])\[([^][]*)\]([,.])/$1 <$2>$3/g;
        # [x3 sides/surfaces should ... ],
        $notes =~ s/\[(x[^][]*)\][;, ]/$1. /g;
        # [indicates a subjective greatness, ... ; terrible (mabla)];
        $notes =~ s/\[(.)([^][]*)\][;, ]/uc($1).$2.". "/ge;
        # [ x3 ... ](
        $notes =~ s/\[(x[^][]*)\]\(/$1 (/g;
        # [ foo ... ](
        $notes =~ s/\[(.)([^][]*)\]\(/uc($1).$2." ("/ge;
        # [ x3 ... ]<EOL>
        $notes =~ s/\[(x[^][]*)\]$/$1. /g;
        # [ foo ... ]<EOL>
        $notes =~ s/\[(.)([^][]*)\]$/uc($1).$2.". "/ge;

	#####
	# Handle x1 things.
	#####
	$notes =~ s/x(\d)(\W)/\$x_$1\$$2/g;
	$notes =~ s/(\W)x(\d)/$1\$x_$2\$/g;

        my $lastnotes="";

        while( $lastnotes ne $notes )
        {
            $lastnotes = $notes;

            # (= foo, foo, foo, ...  )
            if( $notes =~ s/\(\s*=\s+([a-z', ]+)\)/(= ####)/ )
            {
                $notespart = $1;

                # manci,
                $notespart =~ s/([a-z']+), /{$1}, /g;

                # manci
                $notespart =~ s/([a-z']+)\s*$/{$1}/g;

                $notes =~ s/####/$notespart/;
            }
        }

        # (cf. foo, foo, foo, ...  )
        if( $notes =~ s/\(cf\.\s+([a-z', ]+)\)/See also ####./ )
        {
            $notespart = $1;

            # Not good: won't link to a real entry
            ## se manci,
            #$notespart =~ s/((?:se|te|ve|xe) [a-z]+), /{\1}, /g;

            # manci,
            $notespart =~ s/([a-z']+), /{$1}, /g;

            # Not good: won't link to a real entry
            ## se manci
            #$notespart =~ s/((?:se|te|ve|xe) [a-z]+)$/{\1}/g;

            # manci
            $notespart =~ s/([a-z']+)\s*$/{$1}/g;

            $notes =~ s/####/$notespart/;
        }

        $notes =~ s/\s+$//;

        #print $notes."\n\n";

        ####
        # Protect ' in variables for lookup.
        ####
        my $pgismu = $gismu;
        $pgismu =~ s/\'/\'\'/g;
        $pgismu =~ s/ //g;
        my $pglossword = $glossword;
        $pglossword =~ s/\'/\'\'/g;

        next if $gismu =~ /\d/;

        ## print "GOING!\n";
        ## print "$lang, $gismu, $definition, $notes, $userid, $time);\n";

        $dbh->begin_work;

        # Check if valsi is already entered as a cmavo
        my $test_valsiid = $dbh->selectrow_array("SELECT valsiid FROM valsi WHERE word='$pgismu'\n");

        $dbh->do("UPDATE definitions SET notes=?
            WHERE valsiid=? AND langid=? AND definitionNum=?",
            undef, $notes, $test_valsiid, $lang, 1 );

        $dbh->commit;
    }
}

open(CMAVO,$ARGV[1]);
while(<CMAVO>) {
    if(/^(.{11})(.{9})(.{42})(.{5,106})(.*)./) {
        my($cmavo,$selmaho,$glossword,$definition,$notes) = ($1,$2,$3,$4,$5);
        ## print "$cmavo,$selmaho,$glossword,$definition,$notes,\n";

        # Clean out spaces.
        $cmavo =~ s/\s+$//;
        $selmaho =~ s/\s+$//;
        $glossword =~ s/\s+$//;
        $definition =~ s/\s+$//;
        $notes =~ s/\s+$//;

        $cmavo =~ s/^\.//g;
        $cmavo =~ s/^\s+//g;

        ####
        # Protect ' in variables for lookup.
        ####
        my $pcmavo = $cmavo;
        $pcmavo =~ s/\'/\'\'/g;
        my $pglossword = $glossword;
        $pglossword =~ s/\'/\'\'/g;


        next if $cmavo =~ /\d/;

        ####
        # Now we try to turn the notes into something that approximates
        # valid Wiki text.
        ####
        # ka[ ... ],
        $notes =~ s/([a-z'])\[([^][]*)\]([,.])/$1 <$2>$3/g;
        # [x3 sides/surfaces should ... ],
        $notes =~ s/\[(x[^][]*)\][;, ]/$1. /g;
        # [indicates a subjective greatness, ... ; terrible (mabla)];
        $notes =~ s/\[(.)([^][]*)\][;, ]/uc($1).$2.". "/ge;
        # [ x3 ... ](
        $notes =~ s/\[(x[^][]*)\]\(/$1 (/g;
        # [ foo ... ](
        $notes =~ s/\[(.)([^][]*)\]\(/uc($1).$2." ("/ge;
        # [ x3 ... ]<EOL>
        $notes =~ s/\[(x[^][]*)\]$/$1. /g;
        # [ foo ... ]<EOL>
        $notes =~ s/\[(.)([^][]*)\]$/uc($1).$2.". "/ge;

	#####
	# Handle x1 things.
	#####
	$notes =~ s/x(\d)(\W)/\$x_$1\$$2/g;
	$notes =~ s/(\W)x(\d)/$1\$x_$2\$/g;

        my $lastnotes="";

        while( $lastnotes ne $notes )
        {
            $lastnotes = $notes;

            # (= foo, foo, foo, ...  )
            if( $notes =~ s/\(\s*=\s+([a-z', ]+)\)/(= ####)/ )
            {
                $notespart = $1;

                # manci,
                $notespart =~ s/([a-z']+), /{$1}, /g;

                # manci
                $notespart =~ s/([a-z']+)\s*$/{$1}/g;

                $notes =~ s/####/$notespart/;
            }
        }

        # (cf. foo, foo, foo, ...  )
        if( $notes =~ s/\(cf\.\s+([a-z', ]+)\)/See also ####./ )
        {
            $notespart = $1;

            # Not good: won't link to a real entry
            ## se manci,
            #$notespart =~ s/((?:se|te|ve|xe) [a-z]+), /{\1}, /g;

            # manci,
            $notespart =~ s/([a-z']+), /{$1}, /g;

            # Not good: won't link to a real entry
            ## se manci
            #$notespart =~ s/((?:se|te|ve|xe) [a-z]+)$/{\1}/g;

            # manci
            $notespart =~ s/([a-z']+)\s*$/{$1}/g;

            $notes =~ s/####/$notespart/;
        }

        $notes =~ s/\s+$//;

        #print $notes."\n\n";

        $dbh->begin_work;

        # Check if valsi is already entered as a cmavo
        my $test_valsiid = $dbh->selectrow_array("SELECT valsiid FROM valsi WHERE word='$pcmavo'\n");

        $dbh->do("UPDATE definitions SET notes=?
            WHERE valsiid=? AND langid=? AND definitionNum=?",
            undef, $notes, $test_valsiid, $lang, 1 );

        $dbh->commit;

    }
}

$dbh->disconnect;
